#####################################################################
# 	Macros
#####################################################################

# Safe Home
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

[gcode_macro G32]
gcode:
    # BED_MESH_CLEAR
    CG28
    Z_TILT_ADJUST
    CG28
    G0 X125 Y125 Z30 F3600


#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  #Turn off bed fans
  TURN_OFF_BED_FANS

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  STATUS_HEATING                                      # Set LEDs to heating-mode
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
  M190 S{target_bed}                                  # Set the target temp for the bed
  
  # {% if params.BED|int > 90 %}
    # SET_PIN PIN=nevermore VALUE=1                     # Turn on the nevermore
    # SET_FAN_SPEED FAN=bed_fans SPEED=0.3
  # {% endif %}


  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  # M109 S150                                             # Heat hotend to 150c
  M104 S150
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=152 MINIMUM=150

  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  G28 Z                                                # Home Z again after Z_TILT_ADJUST

  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                        # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  CARTOGRAPHER_TOUCH                                   # Calibrate Z-offset

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan
    # SET_PIN PIN=nevermore VALUE=1                       # Turn on the nevermore
    SET_FAN_SPEED FAN=bed_fans SPEED=0.3
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  {% if params.BED|int > 90 %}
    SET_PIN PIN=nevermore VALUE=1                     # Turn on the nevermore
  {% endif %}

  # SET_PIN PIN=nevermore VALUE=1                       # Turn on the nevermore
  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position



[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    TURN_OFF_BED_FANS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    # BED_MESH_CLEAR
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    STATUS_READY


[gcode_macro LOG]
gcode:
  {% set msg = params.MSG|default("") %}
  {action_respond_info(msg)}
  SET_DISPLAY_TEXT MSG={msg}

[gcode_macro WAIT_SEC]
gcode:
  {% set wait_ms = (params.SEC|float) * 1000 %}
  G4 P{wait_ms}

[gcode_macro TEST_X_NOISE]
description: "Гоняет голову по X с разными скоростями для поиска шумов"
gcode:
    {% set speeds = [25, 50, 75, 100, 125, 150, 175, 200] %}
    {% set iterations = 10 %}
    CG28
    G90
    G4 P1000
    {% for s in speeds %}
    {% set res_speed = s*60 %}
        SET_DISPLAY_TEXT MSG="Testing speed {s}mm/s"
        {% for i in range(iterations) %}
            G1 X75 F{res_speed}
            G1 X175 F{res_speed}
            G1 X125 F{res_speed}
        {% endfor %}
        G4 P2000
    {% endfor %}
    SET_DISPLAY_TEXT MSG="Test finished"

[gcode_macro TURN_OFF_NEVERMORE]
description: "Turn off nevermore"
gcode:
    SET_PIN PIN=nevermore VALUE=0.00

[gcode_macro TURN_OFF_BED_FANS]
description: "Turn off bed fans"
gcode:
    SET_FAN_SPEED FAN=bed_fans SPEED=0

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro NOZZLE_WIPE]
description: Wipe nozzle
gcode:
    {% set iterations = 10 %}
    {% set brush_clean_accel = 10000 %}
    {% set saved_accel = printer.toolhead.max_accel %}

    SET_VELOCITY_LIMIT ACCEL={brush_clean_accel}

    G90
    G0 X125 Y255 F12000
    G0 Z1 F900

    G91
    {% for i in range(iterations) %}
        G1 X-10 F18000
        G1 X10 F18000
    {% endfor %}

    G90
    SET_VELOCITY_LIMIT ACCEL={saved_accel}
